<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>Project Nanoframe</title>
    
    <!-- Stylesheet Links -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Syne+Mono&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300&display=swap" rel="stylesheet">
    <!-- Script Links-->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js" integrity="sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW" crossorigin="anonymous"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js" integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV" crossorigin="anonymous"></script>
    <script src="https://threejs.org/build/three.js"></script>
    <%= javascript_pack_tag 'nanobot', 'data-turbolinks-track': 'reload' %>   
     

    <%= stylesheet_link_tag 'application', media: 'all' %> 
    <%= stylesheet_link_tag 'pygments-dark', media: 'all' %>
    </head>  
  <body>

      

    <div class="menu-items">
      <ul class="nav nav-tabs justify-content-end">
        <li class="nav-item">
          <a class="nav-link" href="/">Homepage</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/about">The Project</a>
        </li>
        <li class="nav-item">
          <a class="nav-link active nanofont" href="/nanobot">The Nanobot</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/contact">Contact</a>
        </li>
      </ul>
    </div>
    

    <!-- End of NAVBAR-->
    
    <!-- Start of Synthesizer Selection-->
    <div class="row selection-menu">
      <div class="col-md-6 synthesizer-container">
        <canvas id="synthesizer"></canvas>
        
      </div>
      <div class="col-md-6">
        <div class="synthesizer-header">
          <h3>Select Synthesizing Options</h3>
        </div>
        <div class="shape-dropdown">
          <select id="synthesizer-shape" class="form-select" aria-label="Default select example">
            <option value="0" selected disabled>The Desired 3D Object</option>
            <option value="1">Cube</option>
            <option value="2">Sphere</option>
            <option value="3">Cylinder</option>
            <option value="4">Cone</option>
            <option value="5">Polyhedron</option>
            <option value="6">Tetrahedron</option>
            <option value="7">Octahedron</option>
            <option value="8">Icosahedron</option>
            <option value="9">Dodecahedron</option>
            <option value="10">Torus</option>
            <option value="11">Torus Knot</option>
          </select>
        </div>
        <div class="row color-scaffold-select">
          <div class="col-md-5 color-select">
            <div class="row">
              <div class="col-md-7">
                <span class="input-group-text">Color</span>
              </div>
              <div class="col-md-5">
                <input type="color" class="form-control form-control-color" id="exampleColorInput" value="#000000">
              </div>
            </div>
          </div>
          <div class="col-md-7 scaffold-select">
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio1" value="option1">
              <label class="form-check-label" for="inlineRadio1">8064 nucleotides scaffold</label>
            </div>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio2" value="option2" checked>
              <label class="form-check-label" for="inlineRadio2">7249 nucleotides scaffold</label>
            </div>
          </div>
        </div>
        <div class="dimension-picker">
          <div class="height-container dimension-container">
            <div class="input-group dimension-input-container">
              <span class="input-group-text w-25">Height</span>
              <input type="text" class="dimension-input height-input form-control" placeholder="45 nm" aria-label="height">
            </div>
          </div>
          <div class="width-container dimension-container">
            <div class="input-group dimension-input-container">
              <span class="input-group-text w-25">Width</span>
              <input type="text" class="dimension-input width-input form-control" placeholder="45 nm" aria-label="width">
            </div>
          </div>
          <div class="depth-container dimension-container">
            <div class="input-group dimension-input-container">
              <span class="input-group-text w-25">Depth</span>
              <input type="text" class="dimension-input depth-input form-control" placeholder="45 nm" aria-label="depth">
            </div>
          </div>
          <div class="radius-container dimension-container">
            <div data-bs-toggle="tooltip" data-bs-placement="left" 
            title="Radius of the chosen object." class="input-group dimension-input-container">
              <span class="input-group-text w-25">Radius</span>
              <input type="text" class="dimension-input radius-input form-control" placeholder="20 nm" aria-label="radius">
            </div>
          </div>
          <div class="rs-container dimension-container">
            <div data-bs-toggle="tooltip" data-bs-placement="left" 
            title="Number of segmented faces around the circumference." 
            class="input-group dimension-input-container">
              <span class="input-group-text w-25">Radial Segment</span>
              <input type="text" class="dimension-input rs-input form-control" placeholder="10 nm" aria-label="radial segment">
            </div>
          </div>
          <div class="rt-container dimension-container">
            <div data-bs-toggle="tooltip" data-bs-placement="left"
            title="Radius of the chosen object at the top" 
            class="input-group dimension-input-container">
              <span class="input-group-text w-25">Radius Top</span>
              <input type="text" class="dimension-input rst-input form-control" placeholder="20 nm" aria-label="radial segment">
            </div>
          </div>
          <div class="rb-container dimension-container">
            <div data-bs-toggle="tooltip" data-bs-placement="left" 
            title="Radius of the object at the bottom" 
            class="input-group dimension-input-container">
              <span class="input-group-text w-25">Radius Bottom</span>
              <input type="text" class="dimension-input rsb-input form-control" placeholder="15 nm" aria-label="radial segment">
            </div>
          </div>
          <div class="detail-container dimension-container">
            <div title="Setting this to a value greater than 0 adds vertices making it no longer a chosen hedron." class="input-group dimension-input-container">
              <span class="input-group-text w-25">Detail</span>
              <input type="text" class="dimension-input detail-input form-control" placeholder="0" aria-label="radial segment">
            </div>
          </div>
          <div class="ws-container dimension-container">
            <div class="input-group dimension-input-container">
              <span class="input-group-text w-25">Width Segment</span>
              <input type="text" class="dimension-input ws-input form-control" placeholder="13 nm" aria-label="radial segment">
            </div>
          </div>
          <div class="hs-container dimension-container">
            <div class="input-group dimension-input-container">
              <span class="input-group-text w-25">Height Segment</span>
              <input type="text" class="dimension-input hs-input form-control" placeholder="20 nm" aria-label="radial segment">
            </div>
          </div>

          <div class="tube-container dimension-container">
            <div data-bs-toggle="tooltip" data-bs-placement="left" title="Radius of the tube." 
            class="input-group dimension-input-container">
              <span class="input-group-text w-25">Tube Radius</span>
              <input type="text" class="dimension-input tube-input form-control" placeholder="6 nm" aria-label="radial segment">
            </div>
          </div>

          <div class="tubular-container dimension-container">
            <div class="input-group dimension-input-container">
              <span class="input-group-text w-25">Tubular Segment</span>
              <input type="text" class="dimension-input tubular-input form-control" placeholder="10 nm" aria-label="radial segment">
            </div>
          </div>

          <div class="p-container dimension-container">
            <div data-bs-toggle="tooltip" data-bs-placement="left" 
            title="This value determines, how many times the geometry 
            winds around its axis of rotational symmetry. Default is 2." class="input-group dimension-input-container">
              <span class="input-group-text w-25">P</span>
              <input type="text" class="dimension-input p-input form-control" placeholder="5" aria-label="radial segment">
            </div>
          </div>

          <div class="q-container dimension-container">
            <div data-bs-toggle="tooltip" data-bs-placement="left" 
            title="This value determines, how many times the geometry winds around 
            a circle in the interior of the torus. Default is 3." class="input-group dimension-input-container">
              <span class="input-group-text w-25">Q</span>
              <input type="text" class="dimension-input q-input form-control" placeholder="5" aria-label="radial segment">
            </div>
          </div>
          
        </div>
        <div class="synthesizer-btn-container">
          <button type="button" class="synthesizer-btn btn btn-secondary btn-lg w-50" disabled>Synthesize</button>
        </div>
      </div>

    </div>

    <!-- End of Synthesizer Selection-->


    <!-- Start of Synthesizer-->
    
    <div class="generator-outer-container">
      <div class="generator-text">
        <div class="animate-typing" data-type-speed="200" data-type-delay="20" 
        data-remove-speed="20" data-remove-delay="500" >
          Synthesization Results |
          Generated
        </div>
        <!-- download buttons start -->
        <div class="generator-download-container">
          <button type="button" class="btn btn-outline-warning" data-bs-toggle="button" autocomplete="off">
          <%= image_tag("download", class: "generate-download-txt") %> .txt
          </button>
          
          <button type="button" class="btn btn-outline-secondary" data-bs-toggle="button" autocomplete="off">
          <%= image_tag("download", class: "generate-download-txt") %> .oxview
          </button>

          <button type="button" class="btn btn-outline-success" data-bs-toggle="button" autocomplete="off">
          <%= image_tag("download", class: "generate-download-txt") %> .csv
          </button>
        </div>

        <!-- download buttons end-->
        <hr class="middle-hr my-4">
      </div>
      <div class="generator-container">
        <canvas id="generator"></canvas>
      </div>
    </div>

    <!-- End of Synthesizer-->

    <!-- Start of FOOTER-->
    <div class="container" id="footer">
      <hr class="my-4">
    
      <div class="footer-copyright text-center py-3">
        <div class="copyright">
          <p>© 2021 <a href="https://tilabberkeley.com/">Ti Lab</a> @ Berkeley</p>
        </div> 
      </div>
    </div> 
    <!-- End of FOOTER-->
    <%= javascript_pack_tag 'model', 'data-turbolinks-track': 'reload'%>
    <%= javascript_pack_tag 'generator', 'data-turbolinks-track': 'reload'%>
    <%= javascript_pack_tag 'typingAnimation', 'data-turbolinks-track': 'reload' %>
    
    <!-- Start of Generator Script -->
    <script type="module">
        //import {CSS2DRenderer, CSS2DObject} from 'three-css2drender'
        import TrackballControls from '../../assets/javascript/TrackballControls';
        import { PDBLoader } from './PDBLoader';
        
        main();
        function main() {
            let camera, scene, renderer, labelRenderer;
            let controls;
            
            let root;
            
            const loader = new PDBLoader();
            const offset = new THREE.Vector3();
            
            const canvas = document.querySelector('#generator');
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 5000 );
            camera.position.z = 1000;
            scene.add( camera );
            
            const light1 = new THREE.DirectionalLight( 0xffffff, 0.8 );
            light1.position.set( 1, 1, 1 );
            scene.add( light1 );

            const light2 = new THREE.DirectionalLight( 0xffffff, 0.5 );
            light2.position.set( - 1, - 1, 1 );
            scene.add( light2 );

            root = new THREE.Group();
            scene.add( root );
            console.log("gets here");
            renderer = new THREE.WebGLRenderer( { alpha: true, canvas} );
            renderer.setSize( window.innerWidth, window.innerHeight );
            
            labelRenderer = new CSS2DRenderer();
            labelRenderer.setSize( window.innerWidth, window.innerHeight );
            labelRenderer.domElement.style.position = 'absolute';
            labelRenderer.domElement.style.top = '0px';
            labelRenderer.domElement.style.pointerEvents = 'none';

            controls = new TrackballControls( camera, renderer.domElement );
            controls.minDistance = 500;
            controls.maxDistance = 2000;
            loadMolecule("/assets/models/cocaine.pdb");
            console.log("somehow works");
            window.addEventListener( 'resize', onWindowResize );

            function loadMolecule( url ) {

                while ( root.children.length > 0 ) {
            
                    const object = root.children[ 0 ];
                    object.parent.remove( object );
            
                }
            
                loader.load( url, function ( pdb ) {
                    console.log("wooh");
                    const geometryAtoms = pdb.geometryAtoms;
                    const geometryBonds = pdb.geometryBonds;
                    const json = pdb.json;
            
                    const boxGeometry = new THREE.BoxGeometry( 1, 1, 1 );
                    const sphereGeometry = new THREE.IcosahedronGeometry( 1, 3 );
            
                    geometryAtoms.computeBoundingBox();
                    geometryAtoms.boundingBox.getCenter( offset ).negate();
            
                    geometryAtoms.translate( offset.x, offset.y, offset.z );
                    geometryBonds.translate( offset.x, offset.y, offset.z );
            
                    let positions = geometryAtoms.getAttribute( 'position' );
                    const colors = geometryAtoms.getAttribute( 'color' );
            
                    const position = new THREE.Vector3();
                    const color = new THREE.Color();
            
                    for ( let i = 0; i < positions.count; i ++ ) {
            
                        position.x = positions.getX( i );
                        position.y = positions.getY( i );
                        position.z = positions.getZ( i );
            
                        color.r = colors.getX( i );
                        color.g = colors.getY( i );
                        color.b = colors.getZ( i );
            
                        const material = new THREE.MeshPhongMaterial( { color: color } );
            
                        const object = new THREE.Mesh( sphereGeometry, material );
                        object.position.copy( position );
                        object.position.multiplyScalar( 75 );
                        object.scale.multiplyScalar( 25 );
                        root.add( object );
            
                        const atom = json.atoms[ i ];
            
                        const text = document.createElement( 'div' );
                        text.className = 'label';
                        text.style.color = 'rgb(' + atom[ 3 ][ 0 ] + ',' + atom[ 3 ][ 1 ] + ',' + atom[ 3 ][ 2 ] + ')';
                        text.textContent = atom[ 4 ];
            
                        const label = new CSS2DObject( text );
                        label.position.copy( object.position );
                        root.add( label );
            
                    }
            
                    positions = geometryBonds.getAttribute( 'position' );
            
                    const start = new THREE.Vector3();
                    const end = new THREE.Vector3();
            
                    for ( let i = 0; i < positions.count; i += 2 ) {
            
                        start.x = positions.getX( i );
                        start.y = positions.getY( i );
                        start.z = positions.getZ( i );
            
                        end.x = positions.getX( i + 1 );
                        end.y = positions.getY( i + 1 );
                        end.z = positions.getZ( i + 1 );
            
                        start.multiplyScalar( 75 );
                        end.multiplyScalar( 75 );
            
                        const object = new THREE.Mesh( boxGeometry, new THREE.MeshPhongMaterial( 0xffffff ) );
                        object.position.copy( start );
                        object.position.lerp( end, 0.5 );
                        object.scale.set( 5, 5, start.distanceTo( end ) );
                        object.lookAt( end );
                        root.add( object );
            
                    }
            
                    render();
            
                } );
            
            }

            function onWindowResize() {

                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
            
                renderer.setSize( window.innerWidth, window.innerHeight );
                labelRenderer.setSize( window.innerWidth, window.innerHeight );
            
                render();
            
            }

            function animate() {

                requestAnimationFrame( animate );
                controls.update();
            
                const time = Date.now() * 0.0004;
            
                root.rotation.x = time;
                root.rotation.y = time * 0.7;
            
                render();
            
            }
            
            function render() {
            
                renderer.render( scene, camera );
                labelRenderer.render( scene, camera );
            
            }

            animate();
        }

        

    </script>
    <!-- End of Generator Script -->
  </body>
</html>