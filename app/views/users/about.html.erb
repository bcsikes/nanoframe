<!doctype html>
<html class="no-js">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <meta name="color-scheme" content="light dark">
  <link rel="index" title="Index" href="genindex.html" />
  <link rel="search" title="Search" href="search.html" />

  <meta name="generator" content="sphinx-4.0.2, furo 2021.06.24.beta37" />
  <title>Home - nanoframe documentation</title>
  <%= stylesheet_link_tag 'application', media: 'all' %>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW" crossorigin="anonymous">
  </script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"
    integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV" crossorigin="anonymous">
  </script>


  <style>
    :root {
      --color-code-background: #f8f8f8;
      --color-code-foreground: black;

    }

    @media (prefers-color-scheme: dark) {
      :root {
        --color-code-background: #202020;
        --color-code-foreground: #d0d0d0;

      }
    }

    /* For allowing end-user-specific overrides */
    .override-light {
      --color-code-background: #f8f8f8;
      --color-code-foreground: black;

    }

    .override-dark {
      --color-code-background: #202020;
      --color-code-foreground: #d0d0d0;

    }
  </style>
  <%= stylesheet_link_tag 'pygments-dark', media: 'all' %>
</head>

<body dir="">

  <div class="menu-items">
    <ul class="nav nav-tabs justify-content-end">
      <li class="nav-item">
        <a class="nav-link" href="/">Homepage</a>
      </li>
      <li class="nav-item">
        <a class="nav-link active nanofont" href="/about">The Project</a>
      </li>
      <li class="nav-item">
        <a class="nav-link " href="/nanobot">The Nanobot</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/contact">Contact</a>
      </li>
    </ul>
  </div>
  <div class="furo-wrapper">

    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
      <symbol id="svg-toc" viewBox="0 0 24 24">
        <title>Contents</title>
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
          stroke-width="1.5" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round">
          <path stroke="none" d="M0 0h24v24H0z" />
          <line x1="4" y1="6" x2="20" y2="6" />
          <line x1="10" y1="12" x2="20" y2="12" />
          <line x1="6" y1="18" x2="20" y2="18" />
        </svg>
      </symbol>
      <symbol id="svg-menu" viewBox="0 0 24 24">
        <title>Menu</title>
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
          stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
          class="feather feather-menu">
          <line x1="3" y1="12" x2="21" y2="12"></line>
          <line x1="3" y1="6" x2="21" y2="6"></line>
          <line x1="3" y1="18" x2="21" y2="18"></line>
        </svg>
      </symbol>
      <symbol id="svg-arrow-right" viewBox="0 0 24 24">
        <title>Expand</title>
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
          stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
          class="feather feather-chevron-right">
          <polyline points="9 18 15 12 9 6"></polyline>
        </svg>
      </symbol>
    </svg>

    <input type="checkbox" class="sidebar-toggle" name="__navigation" id="__navigation">
    <input type="checkbox" class="sidebar-toggle" name="__toc" id="__toc">
    <label class="overlay sidebar-overlay" for="__navigation"></label>
    <label class="overlay toc-overlay" for="__toc"></label>



    <div class="page">
      <header class="mobile-header">
        <div class="header-left">
          <label class="nav-overlay-icon" for="__navigation">
            <i class="icon"><svg>
                <use href="#svg-menu"></use>
              </svg></i>
          </label>
        </div>
        <div class="header-center">
          <a href="#">
            <div class="brand">nanoframe documentation</div>
          </a>
        </div>
        <div class="header-right">
          <label class="toc-overlay-icon toc-header-icon" for="__toc">
            <i class="icon"><svg>
                <use href="#svg-toc"></use>
              </svg></i>
          </label>
        </div>
      </header>
      <aside class="sidebar-drawer useless-sidebar">

      </aside>
      <main class="main">
        <div class="content">
          <article role="main">
            <label class="toc-overlay-icon toc-content-icon" for="__toc">
              <i class="icon"><svg>
                  <use href="#svg-toc"></use>
                </svg></i>
            </label>
            <div class="section" id="welcome-to-project-nanoframe">
              <h1>Welcome to Project Nanoframe!<a class="headerlink" href="#welcome-to-project-nanoframe"
                  title="Permalink to this headline">¶</a></h1>
              <div class="toctree-wrapper compound">
              </div>
              <div class="section" id="introduction">
                <h2>Introduction<a class="headerlink" href="#introduction" title="Permalink to this headline">¶</a></h2>
                <p>Given a DNA scaffold, in this porject, we show how to synthesize
                  a wide selection of 3D shapes using control theory and Monte Carlo
                  methods. The example in this discussion is a cube. throughout the
                  article we will work with a 7249-nucleotide basis DNA scaffold. The
                  computations extend smoothly to longer scaffolds.</p>
              </div>
              <div class="section" id="setup">
                <h2>Setup<a class="headerlink" href="#setup" title="Permalink to this headline">¶</a></h2>
                <div class="admonition important">
                  <p class="admonition-title">Important</p>
                  <p>The 3D DNA scaffold lives in a 3-dimensional plane, wherein
                    it has <span class="math notranslate nohighlight">\(x\)</span>, <span
                      class="math notranslate nohighlight">\(y\)</span>, and <span
                      class="math notranslate nohighlight">\(z\)</span> coordinates.</p>
                </div>
                <p>For a 7249-nucleotide long scaffold, each nucleotide can be encoded
                  in a matrix where it will have a it’s <span class="math notranslate nohighlight">\(x\)</span>, <span
                    class="math notranslate nohighlight">\(y\)</span>, and <span
                    class="math notranslate nohighlight">\(z\)</span>
                  coordinates as the row. This results in a tall <span
                    class="math notranslate nohighlight">\(R^{7249x3}\)</span> matrix.</p>
                <div class="math-wrapper">
                  <div class="math notranslate nohighlight">
                    \[\begin{split}\vec{x} = \begin{bmatrix}x_{1} &amp; y_{1} &amp; z_{1} \\
                    x_{2} &amp; y_{2} &amp; z_{2} \\
                    x_{3} &amp; y_{3} &amp; z_{3} \\
                    \vdots &amp; &amp; \vdots \\
                    x_{7249} &amp; y_{7249} &amp; z_{7249}\end{bmatrix}\end{split}\]</div>
                </div>
                <p>The desired cube shape will also have a nucleotide coordinates, which
                  will be denoted by <span class="math notranslate nohighlight">\(\vec{x}^{*}\)</span>. So, the problem
                  now boils down to
                  moving the current poistion matrix to the desired position matrix. It’s
                  possible to solve this problem using time dependant feedback control.
                  The model is described by three equations.</p>
                <div class="math-wrapper">
                  <div class="math notranslate nohighlight">
                    \[\begin{equation}
                    \vec{x}[n] = A\vec{x}[n-1] + B\vec{u}[n-1]
                    \end{equation}\]</div>
                </div>
                <div class="math-wrapper">
                  <div class="math notranslate nohighlight">
                    \[\vec{x}^* = \vec{x}[n]\]</div>
                </div>
                <div class="math-wrapper">
                  <div class="math notranslate nohighlight">
                    \[\vec{x}^* = \vec{x}[n+k] \quad \forall k\in[n+1, \infty]\]</div>
                </div>
                <p>To simplify the given task, we will work on each side of a cube one
                  at a time. This means that up to the <span class="math notranslate nohighlight">\(m\text{th}\)</span>
                  row of
                  matrix <span class="math notranslate nohighlight">\(\vec{x}\)</span> will be in play where <span
                    class="math notranslate nohighlight">\(m\)</span> is the number
                  of precombuted nucleotides requried on each side.</p>
              </div>
              <div class="section" id="construction">
                <h2>Construction<a class="headerlink" href="#construction" title="Permalink to this headline">¶</a></h2>
                <div class="admonition important">
                  <p class="admonition-title">Important</p>
                  <p>In a 7249-nucleotide long scaffold, the number of nucleotides
                    neccessary on each plane is <span class="math notranslate nohighlight">\(\approx 1208\)</span>.</p>
                </div>
                <p><strong>First</strong>, a random nucleotide is chosen in the given scaffold. This will
                  be marked as the first row in <span class="math notranslate nohighlight">\(\vec{x}\)</span>. The
                  program will follow on
                  recording coordiantes of the remaining nucleotides. Once this is done,
                  the first 1208 rows of the <span class="math notranslate nohighlight">\(\vec{x}^*\)</span> and <span
                    class="math notranslate nohighlight">\(\vec{x}\)</span> are compared.
                  The following model is proposed:</p>
                <div class="math-wrapper">
                  <div class="math notranslate nohighlight">
                    \[\vec{x}[1] = A\vec{x}[0] + B\vec{u}[0]\]</div>
                </div>
                <div class="math-wrapper">
                  <div class="math notranslate nohighlight">
                    \[\vec{x}[2] = A\vec{x}[1] + B\vec{u}[1] = A^{2}\vec{x}[0] + AB\vec{u}[0] + B\vec{u}[1]\]</div>
                </div>
                <p>Finally,</p>
                <div class="math-wrapper">
                  <div class="math notranslate nohighlight">
                    \[\vec{x}^* = A^{m}\vec{x}[0] + A^{m-1}B\vec{u}[0] + \dots + B\vec{u}[m]\]</div>
                </div>
                <p>Here, <span class="math notranslate nohighlight">\(A\)</span> and <span
                    class="math notranslate nohighlight">\(B\)</span> are given trasnformation matrices and
                  <span class="math notranslate nohighlight">\(\vec{u}[n]\)</span> is the given control at time <span
                    class="math notranslate nohighlight">\(n\)</span>.</p>
                <p>Therefore, the given problem simplifies down to finding required control
                  for a given starting position provided some <span class="math notranslate nohighlight">\(A\)</span>
                  and <span class="math notranslate nohighlight">\(B\)</span> matrices
                  which act like a natural movement process.</p>
                <div class="math-wrapper">
                  <div class="math notranslate nohighlight">
                    \[\begin{split}\vec{x}^* - A^{m}x[0]= \begin{bmatrix} A^{m-1}B &amp; A^{m-2}B &amp; \dots &amp;
                    B\end{bmatrix}
                    \begin{bmatrix}u[0] \\ u[1] \\ \vdots \\ u[m]\end{bmatrix}\end{split}\]</div>
                </div>
                <p>For convenience, the residual <span class="math notranslate nohighlight">\(\vec{x}^* -
                    A^{m}\vec{x}[0]\)</span> will be denoted by
                  <span class="math notranslate nohighlight">\(\tilde{\vec{x}}\)</span>.</p>
                <p>A natural question to ask is whether there is any gurantee that <span
                    class="math notranslate nohighlight">\(\vec{x}[n+1] = \vec{x}^*\)</span>.
                  In words, after the desired position vector is reached, does the scaffold stay in that position
                  after any number of timestamps.</p>
                <p>A sound solution is to use feedback control. First, we establish that <span
                    class="math notranslate nohighlight">\(\vec{u}\)</span> is a <span
                    class="math notranslate nohighlight">\(3x1\)</span>
                  matrix, and hence <span class="math notranslate nohighlight">\(B\)</span> is a <span
                    class="math notranslate nohighlight">\(7249x3\)</span> matrix.</p>
                <div class="math-wrapper">
                  <div class="math notranslate nohighlight">
                    \[\vec{u} = \begin{bmatrix}\hat{x} &amp; \hat{y} &amp; \hat{z} \end{bmatrix}\]</div>
                </div>
                <p>Here, <span class="math notranslate nohighlight">\(\hat{x}\)</span>, <span
                    class="math notranslate nohighlight">\(\hat{y}\)</span>, and <span
                    class="math notranslate nohighlight">\(\hat{z}\)</span> are the controls applied on each direction
                  of the nucleotide. The feedback control would then be represented as follows.</p>
                <div class="math-wrapper">
                  <div class="math notranslate nohighlight">
                    \[\vec{u} = K\vec{x}\]</div>
                </div>
                <p>Here <span class="math notranslate nohighlight">\(K \in R^{1x7249}\)</span>. With this modification,
                  the problem simplifies to</p>
                <div class="math-wrapper">
                  <div class="math notranslate nohighlight">
                    \[\vec{x}[n+1] = A\vec{x}[n] + BK\vec{x}[n]
                    \Rightarrow = (A+BK)\vec{x}[n]\]</div>
                </div>
                <p>Then, the value of closed-loop control <span class="math notranslate nohighlight">\(K\)</span> can be
                  chosen such that <span class="math notranslate nohighlight">\(A + BK = I\)</span>.
                  Thus,</p>
                <div class="math-wrapper">
                  <div class="math notranslate nohighlight">
                    \[\vec{x}[n+1] = \vec{x}[n] = \vec{x}^*\]</div>
                </div>
              </div>
              <div class="section" id="rotation">
                <h2>Rotation<a class="headerlink" href="#rotation" title="Permalink to this headline">¶</a></h2>
                <p>So far, we have dealt only with a select number of nucleotides, 1208 to be exact. Geometrically,
                  we built one plane of the cube, but the rest are still unconstructed. Since the dimensions of the
                  desired
                  shape are given, and we know <span class="math notranslate nohighlight">\(x[0]\)</span> – the initial
                  starting point – we can compute where the rest of the
                  coordinates relative to <span class="math notranslate nohighlight">\(x[0]\)</span> are.</p>
                <p>Let <span class="math notranslate nohighlight">\(F_{i}\)</span> represent the <span
                    class="math notranslate nohighlight">\(i\text{th}\)</span> face of the cube. The matrix <span
                    class="math notranslate nohighlight">\(F\)</span> will be the desired
                  final shape, we will use <span class="math notranslate nohighlight">\(\vec{X}^* = F\)</span> moving
                  forwards.</p>
                <div class="math-wrapper">
                  <div class="math notranslate nohighlight">
                    \[\begin{split}F = \begin{bmatrix}F_{1} &amp; F_{2} \\ F_{3} &amp; F_{4} \\ F_{5} &amp;
                    F_{6}\end{bmatrix}\end{split}\]</div>
                </div>
                <p>Then, the problem can be rephrased to solving required controls per each side.</p>
                <div class="math-wrapper">
                  <div class="math notranslate nohighlight">
                    \[\begin{split}\vec{X}[n] = \begin{bmatrix}A_{1} &amp; A_{2} \\ A_{3} &amp; A_{4} \\ A_{5} &amp;
                    A_{6} \end{bmatrix} \vec{X}[n-1] +
                    \begin{bmatrix}B_{1} &amp; B_{2} \\ B_{3} &amp; B_{4} \\ B_{5} &amp; B_{6} \end{bmatrix}
                    \vec{U}[n]\end{split}\]</div>
                </div>
                <p>We have,</p>
                <div class="math-wrapper">
                  <div class="math notranslate nohighlight">
                    \[\begin{split}\vec{X}[n] = \begin{bmatrix}x[n]_{1} &amp; x[n]_{2} \\ x[n]_{3} &amp; x[n]_{4} \\
                    x[n]_{5} &amp; x[n]_{6}\end{bmatrix}\end{split}\]</div>
                </div>
                <p>and,</p>
                <div class="math-wrapper">
                  <div class="math notranslate nohighlight">
                    \[\begin{split}\vec{U}[n] = \begin{bmatrix}u[n]_{1} &amp; u[n]_{2} \\ u[n]_{3} &amp; u[n]_{4} \\
                    u[n]_{5} &amp; u[n]_{6}\end{bmatrix}\end{split}\]</div>
                </div>
                <p>The following algorithm is proposed for find a solution.</p>
                <div class="highlight-java notranslate">
                  <div class="highlight">
                    <pre><span></span><span class="n">function</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
   <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
   <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">apply_control</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">1208</span><span class="p">);</span>
      <span class="n">apply_transform</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
      <span class="n">i</span><span class="o">++</span>
   <span class="p">}</span>
   <span class="n">apply_control</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">function</span> <span class="nf">apply_control</span><span class="p">(</span><span class="kt">int</span> <span class="n">side</span><span class="p">,</span> <span class="kt">int</span> <span class="n">steps</span><span class="p">)</span> <span class="p">{</span>
   <span class="kt">int</span> <span class="n">min_steps</span> <span class="o">=</span> <span class="n">steps</span><span class="p">;</span>
   <span class="kt">boolean</span> <span class="n">broke</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
   <span class="o">[]</span><span class="n">Vector</span> <span class="n">computed_control</span> <span class="o">=</span> <span class="n">compute_control</span><span class="p">(</span><span class="n">x_</span><span class="p">{</span><span class="n">i</span><span class="o">*</span><span class="mi">1208</span><span class="p">}...</span><span class="na">x_</span><span class="p">{</span><span class="n">i</span><span class="o">*</span><span class="mi">1208</span><span class="o">+</span><span class="mi">1207</span><span class="p">});</span>

   <span class="k">for</span> <span class="p">(</span><span class="n">Vector</span> <span class="n">control</span> <span class="p">:</span> <span class="n">computed_control</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// run given control through monte carlo sumulation</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">breakage</span> <span class="n">occurs</span><span class="p">)</span> <span class="p">{</span>
         <span class="c1">// reject control</span>
         <span class="n">min_steps</span><span class="o">++</span><span class="p">;</span>
         <span class="n">broke</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
         <span class="k">break</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
         <span class="c1">// accept control</span>
         <span class="k">continue</span><span class="p">;</span>
      <span class="p">}</span>
   <span class="p">}</span>

   <span class="k">if</span> <span class="p">(</span><span class="n">broke</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">apply_control</span><span class="p">(</span><span class="kt">int</span> <span class="n">side</span><span class="p">,</span> <span class="kt">int</span> <span class="n">min_steps</span><span class="p">);</span>
   <span class="p">}</span>

   <span class="k">return</span> <span class="n">computed_control</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">function</span> <span class="nf">apply_transform</span><span class="p">(</span><span class="kt">int</span> <span class="n">side</span><span class="p">)</span> <span class="p">{</span>
   <span class="c1">// make projection into A_{side+2}</span>
<span class="p">}</span>
<span class="n">init</span><span class="p">();</span>
</pre>
                  </div>
                </div>
              </div>
              <div class="section" id="testing">
                <h2>Testing<a class="headerlink" href="#testing" title="Permalink to this headline">¶</a></h2>
                <p>To test the stability and validity of the approach, a Gaussian noise is applied after the
                  cube is formed. Below are the results of applying Gaussian noise with varying strength of magnitude.
                </p>
                <p>As is clear from trom the graphic, with small and medium addentitve Gaussian noise, the shape is
                  still
                  well formed. Ideally, a very robust wireframe is required. Notice that so far DNA Origami was not
                  used.
                  Putting the cube through DNA Origami, the results are much more promising.</p>
              </div>
              <div class="section" id="future-steps">
                <h2>Future Steps<a class="headerlink" href="#future-steps" title="Permalink to this headline">¶</a></h2>
                <ul class="simple">
                  <li>
                    <p><a class="reference internal" href="genindex.html"><span class="std std-ref">Index</span></a></p>
                  </li>
                  <li>
                    <p><a class="reference internal" href="py-modindex.html"><span class="std std-ref">Module
                          Index</span></a></p>
                  </li>
                  <li>
                    <p><a class="reference internal" href="search.html"><span class="std std-ref">Search Page</span></a>
                    </p>
                  </li>
                </ul>
              </div>
            </div>

          </article>
          <footer>

            <div class="related-pages">


            </div>
            <div class="footer-copyright text-center py-3">
              <div class="copyright related-information">
                <p>© 2021 <a href="https://tilabberkeley.com/">Ti Lab</a> @ Berkeley</p>
              </div>
            </div>

          </footer>
        </div>
        <aside class="toc-drawer">


          <div class="toc-sticky toc-scroll">
            <div class="toc-title-container">
              <span class="toc-title">
                Contents
              </span>
            </div>
            <div class="toc-tree-container">
              <div class="toc-tree">
                <ul>
                  <li><a class="reference internal" href="#">Welcome to Project Nanoframe!</a>
                    <ul>
                      <li><a class="reference internal" href="#introduction">Introduction</a></li>
                      <li><a class="reference internal" href="#setup">Setup</a></li>
                      <li><a class="reference internal" href="#construction">Construction</a></li>
                      <li><a class="reference internal" href="#rotation">Rotation</a></li>
                      <li><a class="reference internal" href="#testing">Testing</a></li>
                      <li><a class="reference internal" href="#future-steps">Future Steps</a></li>
                    </ul>
                  </li>
                </ul>

              </div>
            </div>
          </div>


        </aside>
      </main>
    </div>
    <%= javascript_pack_tag 'documentation_options', 'data-turbolinks-track': 'reload' %>
    <%= javascript_pack_tag 'underscore', 'data-turbolinks-track': 'reload' %>
    <%= javascript_pack_tag 'doctools', 'data-turbolinks-track': 'reload' %>
    <%= javascript_pack_tag 'main_docs', 'data-turbolinks-track': 'reload' %>
    <script async="async" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
  </div>
</body>

</html>